(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{301:function(n,t,e){"use strict";e.r(t);var s=e(16),i=Object(s.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"web图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web图"}},[this._v("#")]),this._v(" web图")]),this._v(" "),t("p",[t("img",{attrs:{src:"http://ww2.sinaimg.cn/large/006HJ39wgy1ffdx6hf3kqj315g27i1kx.jpg",alt:""}})]),this._v(" "),t("p",[this._v("前端\n1.统一开发工具、代码格式规范及语法规范\n2.建议由2人及以上跟进一个项目，每人可以跟进多个项目，在不同项目中一人主负责，其他人协同，以减少项目对个人的依赖性，避免紧急任务在短时间内单人不能完成情况，同时也可以学习每个人的编码优点，提升产品质量\n3.加强前端团队内部知识点分享，逐步提升个人及团队能力\n前后端配合\n1.按照接口文档规范，使用element组件时需按照已有的数据格式模板提供接口文档\n2.未知交互需要由前后端紧密配合共同定义接口，编写接口文档，提升团队成员之间的协作效率\n老产品\n1.前后端未分离：考虑到维护成本，尽量不影响业务及交互方式，只针对UI界面进行样式修改;如何整体有较大的交互变动，建议采用前后端分离模式对产品进行重构\n2.前后端分离：新增或者修改功能在兼容已有情况下尽量向现有规范靠拢\n新产品\n新产品遵循现有设计规范及开发规范\n产品和项目\n产品要基于项目，但要超越项目的限制，更多考虑通用性、扩展性、实用性等，项目的特殊场景需要特殊考虑，不一定由产品实现，如果产品实现每一个项目的特殊情况会产品会变得臃肿，不利于维护\n组件库\n1.对于基础组件需要足够原子化以及灵活性，比如 Button, Menu 等\n2.对于功能比较确定同时复杂度较高业务组件通过npm依赖使用，不可随意更改业务组件代码\n3.组件采用统一语法规范及使用模式，增加特殊情况应用demo，减小前后端使用难度\n4.增加基于vue+原生JS/第三方库的大数据组件库开发\n5.丰富现有基础组件库\n模板\n1.样板工程会包含通用的布局、常用页面、工程配置等，常在初始化项目时使用\n2.前期基于已有项目结构，抽离比较通用的模板，后期丰富模板种类，满足部分个性化需求\n3.模板支持一键创建，支持风格切换及可传入的配置选项")])])}),[],!1,null,null,null);t.default=i.exports}}]);